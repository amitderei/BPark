package controllers;

import client.ClientController;
import common.Subscriber;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import ui.UiUtils;

/**
 * Screen used by an attendant to create a new subscriber account.
 * Performs client-side validation, builds a Subscriber object,
 * and forwards it to the server.  The server assigns the
 * subscriber code and RFID tag.
 */
public class RegisterSubscriberController implements ClientAware {

    /* ---------- runtime ---------- */
    private ClientController client;

    /* ---------- FXML controls ---------- */
    @FXML private TextField txtUserId;
    @FXML private TextField txtFirstName;
    @FXML private TextField txtLastName;
    @FXML private TextField txtPhone;
    @FXML private TextField txtEmail;
    @FXML private TextField txtUsername;
    @FXML private Button   btnRegister;
    @FXML private Label    lblStatus;

    /* =====================================================
     *  ClientAware
     * ===================================================== */

    /**
     * Supplies the active ClientController so this screen can
     * send the registration request.
     *
     * @param client active client instance
     */
    @Override
    public void setClient(ClientController client) {
        this.client = client;
    }

    /* =====================================================
     *  UI interaction
     * ===================================================== */

    /**
     * Fired by the "Register" button.
     * Validates each field and, if all checks pass,
     * sends a Subscriber object to the server.
     */
    @FXML
    private void handleRegisterClick() {

        StringBuilder errors = new StringBuilder();

        String userId    = txtUserId   .getText().trim();
        String firstName = txtFirstName.getText().trim();
        String lastName  = txtLastName .getText().trim();
        String phone     = txtPhone    .getText().trim();
        String email     = txtEmail    .getText().trim();
        String username  = txtUsername .getText().trim();

        /* --- basic validation rules --- */
        if (userId.isEmpty() || !userId.matches("\\d{9}"))
            errors.append("- ID must be exactly 9 digits.\n");

        if (firstName.isEmpty())
            errors.append("- First name is required.\n");

        if (lastName.isEmpty())
            errors.append("- Last name is required.\n");

        if (phone.isEmpty() || !phone.matches("^05\\d{8}$"))
            errors.append("- Phone must start with 05 and be 10 digits.\n");

        if (email.isEmpty() || !email.matches("^[\\w.-]+@[\\w.-]+\\.\\w{2,}$"))
            errors.append("- Email format is invalid.\n");

        if (username.isEmpty() || !username.matches("\\w{4,}"))
            errors.append("- Username must be at least 4 characters.\n");

        if (errors.length() > 0) {
            // Show all accumulated errors in red
            UiUtils.setStatus(lblStatus, errors.toString().trim(), false);
            return;
        }

        /* --- build and send the request --- */
        Subscriber sub = new Subscriber(
                0,          // code generated by server
                userId,
                firstName,
                lastName,
                phone,
                email,
                username,
                null);      // tag assigned by server

        client.registerSubscriber(sub);
        UiUtils.setStatus(lblStatus,
                "Registration request sent to server.",
                true);
    }

    /* =====================================================
     *  Callback from ClientController
     * ===================================================== */

    /**
     * Shows result text returned by the server.
     *
     * @param message server message
     * @param success true if the operation succeeded
     */
    public void showStatusFromServer(String message, boolean success) {
        UiUtils.setStatus(lblStatus, message, success);
    }
}

